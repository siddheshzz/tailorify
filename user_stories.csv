title,body,labels
"Initialize FastAPI project structure","As a developer, I want to scaffold a FastAPI project structure so I can organize code cleanly.\n\nAcceptance Criteria:\n- Create base folders: api, models, schemas, core, services, db\n- Add main.py entry point\n- Add __init__.py files for all submodules","epic:setup,type:chore"
"Add Dockerfile for FastAPI app","As a developer, I want to containerize the FastAPI app so it runs consistently in any environment.\n\nAcceptance Criteria:\n- Create a Dockerfile using Python 3.11 slim\n- Install dependencies and expose port 8000\n- Use uvicorn to run app","epic:setup,type:chore"
"Add docker-compose.yml for app + database","As a developer, I want to use Docker Compose to run both FastAPI and PostgreSQL together.\n\nAcceptance Criteria:\n- Define services for API and PostgreSQL\n- Mount volumes for code and DB persistence\n- Expose ports 8000 (API) and 5432 (DB)","epic:setup,type:chore"
"Add environment variable support using Pydantic","As a developer, I want to use .env files so I can separate configuration from code.\n\nAcceptance Criteria:\n- Create .env and .env.example files\n- Use Pydantic BaseSettings in config.py to load env variables\n- Configure database and secret keys via env","epic:setup,type:feature"
"Connect FastAPI to PostgreSQL using SQLAlchemy","As a developer, I want to connect to PostgreSQL so I can store application data.\n\nAcceptance Criteria:\n- Install SQLAlchemy and asyncpg\n- Create DB session and engine config\n- Test connection at startup","epic:setup,type:feature"
"Set up Alembic for database migrations","As a developer, I want to manage database schema changes with Alembic.\n\nAcceptance Criteria:\n- Install and configure Alembic\n- Generate initial migration\n- Document how to run alembic upgrade head","epic:setup,type:chore"
"Configure logging for FastAPI","As a developer, I want to log key events and errors so I can monitor and debug the application.\n\nAcceptance Criteria:\n- Configure logging format and levels\n- Write logs to console and/or file\n- Add request/response logging for debugging","epic:setup,type:feature"
"Add health check endpoint","As a developer, I want to have a /healthz endpoint so infrastructure tools can check if the API is up.\n\nAcceptance Criteria:\n- Add /healthz route\n- Return 200 OK with JSON response\n- Ensure it works without auth","epic:setup,type:feature"
"Create User model for authentication","As a developer, I want a user model in the database so I can store registered users.\n\nAcceptance Criteria:\n- Define User table with id, email, hashed_password, created_at\n- Add Alembic migration\n- Use UUIDs or integers as primary keys","epic:auth,type:feature"
"User can register with email and password","As a new user, I want to register with my email and password so I can create an account.\n\nAcceptance Criteria:\n- Accept email, password in request\n- Validate input using Pydantic\n- Hash password and store user in DB\n- Return success or error if email exists","epic:auth,type:feature,priority:high"
"User can log in and receive a JWT token","As a user, I want to log in with my email and password so I can access protected parts of the system.\n\nAcceptance Criteria:\n- Accept email and password in request\n- Validate credentials against DB\n- Return access and refresh JWT tokens on success\n- Return 401 error on invalid credentials","epic:auth,type:feature,priority:high"
"Protect endpoints with JWT authentication middleware","As a developer, I want to ensure protected endpoints can only be accessed by authenticated users.\n\nAcceptance Criteria:\n- Create a dependency to verify JWT token\n- Apply it to protected routes\n- Return 401 Unauthorized for invalid or missing tokens","epic:auth,type:feature"
"Secure user passwords with hashing","As a developer, I want to hash user passwords before storing them to improve security.\n\nAcceptance Criteria:\n- Use passlib or bcrypt to hash passwords\n- Never store plaintext passwords\n- Verify password hashes on login","epic:auth,type:security"
"Authenticated user can fetch their profile","As a user, I want to view my profile data so I can verify or use my account info.\n\nAcceptance Criteria:\n- Return user info from JWT\n- Protect endpoint with token\n- Return fields like email, name, created_at","epic:auth,type:feature"
"Assign user roles (admin, customer)","As an admin, I want to assign roles to users so I can control access to certain features.\n\nAcceptance Criteria:\n- Add role column to user model\n- Allow roles: admin, customer\n- Restrict admin-only routes via role check","epic:auth,type:feature"
"View list of tailoring services","As a user, I want to view a list of available tailoring services so I can choose what I need.\n\nAcceptance Criteria:\n- Public endpoint returns all active services\n- Include name, description, price\n- Return 200 OK with JSON","epic:services,type:feature"
"Admin can create new tailoring service","As an admin, I want to add new tailoring services so customers can place orders.\n\nAcceptance Criteria:\n- Accept name, description, price, category\n- Require admin token for access\n- Save to DB and return created service","epic:services,type:feature,permission:admin"
"Admin can update or delete a tailoring service","As an admin, I want to manage tailoring services so I can edit or remove them.\n\nAcceptance Criteria:\n- PATCH endpoint to update fields\n- DELETE endpoint to remove service\n- Admin access only","epic:services,type:feature,permission:admin"
"View detailed information for a service","As a user, I want to view details for a specific service so I know exactly whatâ€™s included.\n\nAcceptance Criteria:\n- Endpoint returns full details by service ID\n- Return 404 if service not found","epic:services,type:feature"
"Place an order for a tailoring service","As a user, I want to place an order for a tailoring service with my preferences so I can get custom clothing.\n\nAcceptance Criteria:\n- Accept service_id, measurements, notes\n- Create order in DB and associate with user\n- Return order confirmation","epic:orders,type:feature"
"User can view their orders","As a user, I want to view my past and current orders so I can track their status.\n\nAcceptance Criteria:\n- Return orders associated with the authenticated user\n- Include status, service details, created_at","epic:orders,type:feature"
"Update order status (admin only)","As an admin, I want to update order statuses (e.g. pending, fitting, completed) so users are informed.\n\nAcceptance Criteria:\n- PATCH endpoint to update order status\n- Admin access only\n- Notify user on status change (optional)","epic:orders,type:feature,permission:admin"
"Integrate payment gateway (e.g. Stripe)","As a user, I want to pay for my tailoring orders securely through a trusted payment gateway.\n\nAcceptance Criteria:\n- Connect to Stripe (or similar) API\n- Create payment intent for an order\n- Handle webhook callbacks for payment confirmation","epic:payments,type:feature"
"Store payment transaction details","As a developer, I want to store payment transaction details for auditing and user history.\n\nAcceptance Criteria:\n- Save transaction ID, amount, status, timestamps\n- Associate payment with user and order","epic:payments,type:feature"
"User can view payment history","As a user, I want to view my past payments so I can keep track of my spending.\n\nAcceptance Criteria:\n- Return paginated list of payments per user\n- Include amount, date, status","epic:payments,type:feature"
"Add rate limiting to API","As a developer, I want to add rate limiting to prevent abuse and protect the API.\n\nAcceptance Criteria:\n- Limit number of requests per IP per time window\n- Return 429 Too Many Requests on violation","epic:security,type:feature"
"Add input validation and sanitization","As a developer, I want to validate and sanitize all inputs to prevent injection and malformed data.\n\nAcceptance Criteria:\n- Use Pydantic models extensively\n- Reject invalid inputs with clear errors","epic:security,type:feature"
"Write unit and integration tests","As a developer, I want automated tests to ensure code quality and prevent regressions.\n\nAcceptance Criteria:\n- Add tests for auth, services, orders, payments\n- Use pytest framework\n- Achieve 80%+ coverage","epic:testing,type:chore"
"Set up CI/CD pipeline","As a developer, I want to automate testing and deployment to ensure fast, reliable releases.\n\nAcceptance Criteria:\n- Use GitHub Actions or similar\n- Run tests on PR and merge\n- Deploy on merge to main branch (optional)","epic:infra,type:chore"
